shiny::runApp('inst/shiny-examples/app')
runApp('inst/shiny-examples/app')
runApp('inst/shiny-examples/app')
library(cases)
devtools::document()
runApp('inst/shiny-examples/app')
shiny::runApp('inst/shiny-examples/app')
# Get data
dl <- grabDat()
dl$calc
dl$calc %>% filter(geo %in% c("Alberta", "British Columbia", "Ontario", "Quebec"))
runApp('inst/shiny-examples/app')
runApp('inst/shiny-examples/app')
runApp('inst/shiny-examples/app')
dl$dat
runApp('inst/shiny-examples/app')
rlang::last_error()
runApp('inst/shiny-examples/app')
runApp('inst/shiny-examples/app')
runApp()
runApp('inst/shiny-examples/app')
devtools::document()
runApp('inst/shiny-examples/app')
runApp('inst/shiny-examples/app')
runApp('inst/shiny-examples/app')
devtools::document()
shiny::runApp('inst/shiny-examples/app')
min_r_version <- function(pkg) {
requireNamespace("tools")
requireNamespace("utils")
avail <- utils::available.packages(utils::contrib.url(repo))
deps <- tools::package_dependencies(pkg, db = avail, recursive = TRUE)
if (is.null(deps))
stop("package not found")
pkgs <- deps[[1]]
repo = getOption("repo")
if (is.null(repo))
repo <- "https://cloud.r-project.org"
matches <- avail[ , "Package"] %in% pkgs
pkg_list <- avail[matches, "Depends"]
vers <- grep("^R$|^R \\(.*\\)$", pkg_list, value = TRUE)
vers <- gsub("[^0-9.]", "", vers)
if (length(vers) == 0)
return("Not specified")
max_ver = vers[1]
if (length(vers) == 1)
return(max_ver)
for (v in 2:length(vers))
if (utils::compareVersion(vers[v], max_ver) > 0)
max_ver <- vers[v]
max_ver
}
min_r_version("cases")
min_r_version <- function(package="ggplot2", exclude_main_pkg=TRUE) {
purrr::walk(c("tools", "purrr", "devtools", "stringi", "tidyr", "dplyr"),
require, character.only=TRUE)
deps <- package_dependencies(package, recursive=TRUE)
if (exclude_main_pkg) {
pkgs <- deps[[1]]
} else {
pkgs <- c(package, deps[[1]])
}
available.packages() %>%
as_data_frame() %>%
filter(Package %in% pkgs) %>%
select(Depends)  %>%
unlist() -> pkg_list
# if main pkg only relied on core R packages (i.e. pkgs that aren't in CRAN) and we
# excluded the pkg itself from the min version calculation, this is an edge case we need
# to handle.
if (length(pkg_list) == 0) return("Unspecified")
stri_split_regex(pkg_list, "[,]") %>%
unlist() %>%
trimws() %>%
stri_match_all_regex(c("^R$|^R \\(.*\\)$")) %>%
unlist() %>%
discard(is.na(.)) %>%
unique() %>%
stri_replace_all_regex("[R >=\\(\\)]", "") %>%
data_frame(vs=.) %>%
separate(vs, c("a", "b", "c"), fill="right") %>%
mutate(c=ifelse(is.na(c), 0, c)) %>%
arrange(a, b, c) %>%
tail(1) %>%
unite(min, a:c, sep=".") -> vs
return(vs$min)
}
min_r_version()
min_r_version("cases")
min_r_version("cases", exclude_main_pkg = FALSE)
min_r_version <- function(pkg) {
requireNamespace("tools")
requireNamespace("utils")
avail <- utils::available.packages(utils::contrib.url(repo))
deps <- tools::package_dependencies(pkg, db = avail, recursive = TRUE)
if (is.null(deps))
stop("package not found")
pkgs <- deps[[1]]
repo = getOption("repo")
if (is.null(repo))
repo <- "https://cloud.r-project.org"
matches <- avail[ , "Package"] %in% pkgs
pkg_list <- avail[matches, "Depends"]
vers <- grep("^R$|^R \\(.*\\)$", pkg_list, value = TRUE)
vers <- gsub("[^0-9.]", "", vers)
if (length(vers) == 0)
return("Not specified")
max_ver = vers[1]
if (length(vers) == 1)
return(max_ver)
for (v in 2:length(vers))
if (utils::compareVersion(vers[v], max_ver) > 0)
max_ver <- vers[v]
max_ver
}
getOption("repo")
min_r_version <- function(pkg) {
requireNamespace("tools")
requireNamespace("utils")
avail <- utils::available.packages(utils::contrib.url(repo))
deps <- tools::package_dependencies(pkg, db = avail, recursive = TRUE)
if (is.null(deps))
stop("package not found")
pkgs <- deps[[1]]
repo <- getOption("repo")
if (is.null(repo))
repo <- "https://cloud.r-project.org"
matches <- avail[ , "Package"] %in% pkgs
pkg_list <- avail[matches, "Depends"]
vers <- grep("^R$|^R \\(.*\\)$", pkg_list, value = TRUE)
vers <- gsub("[^0-9.]", "", vers)
if (length(vers) == 0)
return("Not specified")
max_ver = vers[1]
if (length(vers) == 1)
return(max_ver)
for (v in 2:length(vers))
if (utils::compareVersion(vers[v], max_ver) > 0)
max_ver <- vers[v]
max_ver
}
min_r_version("ggplot2")
min_r_version <- function(pkg) {
requireNamespace("tools")
requireNamespace("utils")
avail <- utils::available.packages(utils::contrib.url(repo))
deps <- tools::package_dependencies(pkg, db = avail, recursive = TRUE)
if (is.null(deps))
stop("package not found")
pkgs <- deps[[1]]
repo <- NULL
if (is.null(repo))
repo <- "https://cloud.r-project.org"
matches <- avail[ , "Package"] %in% pkgs
pkg_list <- avail[matches, "Depends"]
vers <- grep("^R$|^R \\(.*\\)$", pkg_list, value = TRUE)
vers <- gsub("[^0-9.]", "", vers)
if (length(vers) == 0)
return("Not specified")
max_ver = vers[1]
if (length(vers) == 1)
return(max_ver)
for (v in 2:length(vers))
if (utils::compareVersion(vers[v], max_ver) > 0)
max_ver <- vers[v]
max_ver
}
min_r_version("ggplot2")
min_r_version <- function(pkg) {
requireNamespace("tools")
requireNamespace("utils")
avail <- utils::available.packages(utils::contrib.url(repo))
deps <- tools::package_dependencies(pkg, db = avail, recursive = TRUE)
if (is.null(deps))
stop("package not found")
pkgs <- deps[[1]]
#repo <- null
#if (is.null(repo))
repo <- "https://cloud.r-project.org"
matches <- avail[ , "Package"] %in% pkgs
pkg_list <- avail[matches, "Depends"]
vers <- grep("^R$|^R \\(.*\\)$", pkg_list, value = TRUE)
vers <- gsub("[^0-9.]", "", vers)
if (length(vers) == 0)
return("Not specified")
max_ver = vers[1]
if (length(vers) == 1)
return(max_ver)
for (v in 2:length(vers))
if (utils::compareVersion(vers[v], max_ver) > 0)
max_ver <- vers[v]
max_ver
}
min_r_version("ggplot2")
min_r_version <- function(pkg) {
repo <- "https://cloud.r-project.org"
requireNamespace("tools")
requireNamespace("utils")
avail <- utils::available.packages(utils::contrib.url(repo))
deps <- tools::package_dependencies(pkg, db = avail, recursive = TRUE)
if (is.null(deps))
stop("package not found")
pkgs <- deps[[1]]
#repo <- null
#if (is.null(repo))
matches <- avail[ , "Package"] %in% pkgs
pkg_list <- avail[matches, "Depends"]
vers <- grep("^R$|^R \\(.*\\)$", pkg_list, value = TRUE)
vers <- gsub("[^0-9.]", "", vers)
if (length(vers) == 0)
return("Not specified")
max_ver = vers[1]
if (length(vers) == 1)
return(max_ver)
for (v in 2:length(vers))
if (utils::compareVersion(vers[v], max_ver) > 0)
max_ver <- vers[v]
max_ver
}
min_r_version("ggplot2")
min_r_version("cases")
devtools::document()
